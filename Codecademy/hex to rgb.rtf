{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang2057{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\*\generator Riched20 10.0.17134}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang9 RGB-HEX Converter\par
1.\par
First, we'll create the RGB to Hex method.\par
\par
On line 1, add a method called rgb_hex().\par
\par
2.\par
We should expect users to make accidental errors as they input RGB values. Let's create a constant error message that will store the message we will display to users when they make an accidental error.\par
\par
Inside the method, create a variable called invalid_msg and set it equal to an appropriate error message. The message should say something about invalid values being entered.\par
\par
3.\par
To convert RGB values, we'll have to prompt the user to enter values for red (R), green (G), and blue (B). Let's start by asking them enter a value for red.\par
\par
On the next line, still inside of the method, prompt the user to enter a red value using raw_input. Wrap their input usingint(). Finally, set the result equal to a variable called red.\par
\par
4.\par
We know that an RGB value contains three separate values, with each value representing an amount of red (R), green (G), and blue (B). Acceptable values are within the range of 0 to 255. Let's add error checking to make sure acceptable values are entered.\par
\par
On the next line, add an if statement that checks if the value of red is less than 0, or greater than 255.\par
\par
5.\par
Inside of the if statement, we should inform the user that an invalid value has been entered.\par
\par
Inside of the statement, print the error message that you created earlier. Then, on the next line, return.\par
\par
6.\par
Now, just as in Step 3, prompt the user to enter a value for green (G). Wrap the input using int() and set the result equal to a variable called green.\par
\par
7.\par
Next, add error checking to make sure that the value the user enters for the color green is valid. Inside of the if statement, print the error message and then return on the next line.\par
\par
8.\par
We'll have to follow the same process to prompt the user to enter a value for the color blue (B).\par
\par
Prompt the user, wrap their input with int(), and set it equal to a variable called blue.\par
\par
9.\par
Again, add error checking make sure the value entered for the color blue is valid. Inside of the if statement, print the error message and then return.\par
\par
10.\par
Now it's time to use Bitwise operators to build the rest of our method. We recommend becoming more familiar with hexadecimal numbers first so that you can understand what the Bitwise operators in the method do.\par
\par
11.\par
On the next line, outside of any if statement, create a variable called val. Set it equal to the sum of shifting red to left by 16 bits, shifting green to left by 8 bits, and blue.\par
\par
def rgb_hex():\par
\par
  invalid_msg = "Invalid value. Try again."\par
\par
  red = int(raw_input("Enter red (R) value: "))\par
  if (red < 0 or red > 255):\par
    print invalid_msg\par
    return\par
\par
  # green\par
\par
  # blue\par
\par
  val = (red << 16) + (green << 8) + blue\par
A hexadecimal number can be represented with 3 bytes, a byte for each part of R, G, and B. A byte is composed of two nibbles (4 bit numbers). Hexadecimal numbers have 6 characters and each nibble represents a hex character.\par
\par
Shifting red to the left by 16 bits will insert 16 bits that will hold the place of green (shifted 8 bits to the left) and blue (no shift).\par
\par
Become familiar with bits by reading more here.\par
\par
In the hint above, # green (or # blue) simply indicates that the code has been abbreviated to avoid a lengthy hint. Actual code should not be removed or replaced.\par
\par
12.\par
Finally, call the hex() method and pass value in as the argument. Use list slicing to print out everything except the first two characters of that string. Also, call the upper() method on the result.\par
\par
See if you can use string formatting to complete all of this in one line of code.\par
\par
Click here to learn more about how hex() works.\par
\par
def rgb_hex():\par
\par
  invalid_msg = "Invalid value. Try again."\par
\par
  red = int(raw_input("Enter red (R) value: "))\par
  if (red < 0 or red > 255):\par
    print invalid_msg\par
    return\par
\par
  # green\par
\par
  # blue\par
\par
  val = (red << 16) + (green << 8) + blue\par
  print "%s" % (hex(val)[2:]).upper()\par
13.\par
Great! This method will convert an RGB value to a hex value.\par
\par
Now, add a method called hex_rgb(). This is the method we'll use to convert the opposite way (from Hex to RGB).\par
\par
Use the hint from Step 1 to help you.\par
\par
14.\par
Inside of the method, prompt the user to enter a hexadecimal value using raw_input(). Set the result equal to a variable called hex_val.\par
\par
def rgb_hex():\par
  # Code\par
\par
def hex_rgb():\par
  hex_val = raw_input("Enter the color (six hexadecimal digits): ")\par
15.\par
Let's add some error checking that will make sure the user inputs a valid hexadecimal value. Valid hexadecimal values are six characters long, so let's check for that first.\par
\par
Add an if statement that checks if the length of hex_val is not equal to six.\par
\par
def rgb_hex():\par
  # Code\par
\par
def hex_rgb():\par
  hex_val = raw_input("Enter the color (six hexadecimal digits): ")\par
  if len(hex_val) != 6:\par
16.\par
Inside of the if statement, print a message to the user indicating that an invalid value was entered. On the next line, return.\par
\par
def rgb_hex():\par
  # Code\par
\par
def hex_rgb():\par
  hex_val = raw_input("Enter the color (six hexadecimal digits): ")\par
  if len(hex_val) != 6:\par
    print "Invalid hexidecimal value. Try again."\par
    return\par
17.\par
Otherwise, we should accept the hex value as an integer.\par
\par
Add a corresponding else block that sets hex_val equal to calling int() with the arguments hex_val and 16.\par
\par
def rgb_hex():\par
    # Code\par
\par
def hex_rgb():\par
  hex_val = raw_input("Enter the color (six hexadecimal digits): ")\par
  if len(hex_val) != 6:\par
    print "Invalid hexidecimal value. Try again."\par
    return\par
  else:\par
    hex_val = int(hex_val, 16)\par
The 16 indicates to the int() function that hex_val is in base 16 (a hexadecimal number).\par
\par
18.\par
Next, outside of the else block, but still within the method, create a variable called two_hex_digits and set it equal to 2 raised to the power of 8.\par
\par
def rgb_hex():\par
  # Code\par
\par
def hex_rgb():\par
  hex_val = raw_input("Enter the color (six hexadecimal digits): ")\par
  if len(hex_val) != 6:\par
    print "Invalid hexidecimal value. Try again."\par
    return\par
  else:\par
    hex_val = int(hex_val, 16)\par
\par
  two_hex_digits = 2**8\par
19.\par
Next, we'll start calculating the RGB values.\par
\par
Create a variable called blue and set it equal to hex_val modulo two_hex_digits.\par
\par
def rgb_hex():\par
  # Code\par
\par
def hex_rgb():\par
  hex_val = raw_input("Enter the color (six hexadecimal digits): ")\par
  if len(hex_val) != 6:\par
    print "Invalid hexidecimal value. Try again."\par
    return\par
  else:\par
    hex_val = int(hex_val, 16)\par
\par
  two_hex_digits = 2**8\par
  blue = hex_val % two_hex_digits\par
The variable two_hex_digits represents two hexadecimal digits. This will return the first RGB value (from right to left) of blue (B).\par
\par
20.\par
Next, shift hex_val to the right by 8 bits.\par
\par
def rgb_hex():\par
  # Code\par
\par
def hex_rgb():\par
  hex_val = raw_input("Enter the color (six hexadecimal digits): ")\par
  if len(hex_val) != 6:\par
    print "Invalid hexidecimal value. Try again."\par
    return\par
  else:\par
    hex_val = int(hex_val, 16)\par
\par
  two_hex_digits = 2**8\par
  blue = hex_val % two_hex_digits\par
  hex_val = hex_val >> 8\par
This line does just the opposite of what we did in the previous method. It moves hex_val 8 bits to the right, preparing us to modulo for the next value (G).\par
\par
21.\par
Now, just as you did in Step 19, create a variable called green and set it equal to hex_val modulo two_hex_digits.\par
\par
Use the hint from Step 19 to help you.\par
\par
22.\par
On the next line, shift hex_val once more to the right by 8 bits.\par
\par
Use the hint from Step 20 to help you.\par
\par
23.\par
Finally, calculate the red value by creating a variable called red and setting it equal to hex_val modulo two_hex_digits.\par
\par
Use the hint from Step 19 to help you.\par
\par
24.\par
Let's write the last line of code for this method.\par
\par
On the next line, use string formatting to print out the RGB values on one line. There should be no space between the individual values.\par
\par
def rgb_hex():\par
  # Code\par
\par
def hex_rgb():\par
  hex_val = raw_input("Enter the color (six hexadecimal digits): ")\par
  if len(hex_val) != 6:\par
    print "Invalid hexidecimal value. Try again."\par
    return\par
  else:\par
    hex_val = int(hex_val, 16)\par
\par
  two_hex_digits = 2**8\par
  blue = hex_val % two_hex_digits\par
  hex_val = hex_val >>8\par
  # modulo green\par
  # shift to the right 8 bits\par
  # modulo red\par
\par
  print "Red: %s Green: %s Blue: %s" % (red, green, blue)\par
25.\par
Fantastic! The method you just wrote will convert a hexadecimal value to an RGB value.\par
\par
Let's add the last method that will run our program. Create a new method called convert().\par
\par
Use the hint from Step 1 to help you.\par
\par
26.\par
Inside the method, add a while loop with the Boolean True as the condition.\par
\par
def convert():\par
  while True:\par
27.\par
On the next line, inside of the while loop, prompt the user for input with the following message: Enter 1 to convert RGB to HEX. Enter 2 to convert HEX to RGB. Enter X to Exit:.\par
\par
Set the result equal to a variable called option.\par
\par
def convert():\par
  while True:\par
    option = raw_input("Enter 1 to convert RGB to HEX. Enter 2 to convert HEX to RGB. Enter X to Exit: ")\par
28.\par
Now let's handle all the cases of user input.\par
\par
Start an if statement that checks if option is equal to '1' (as a string).\par
\par
def convert():\par
  while True:\par
    option = raw_input("Enter 1 to convert RGB to HEX. Enter 2 to convert HEX to RGB. Enter X to Exit: ")\par
\par
    if option == '1':\par
29.\par
Inside of the if statement, print the message RGB to Hex... to the user.\par
\par
On the following line, call the rgb_hex() method.\par
\par
def convert():\par
  while True:\par
    option = raw_input("Enter 1 to convert RGB to HEX. Enter 2 to convert HEX to RGB. Enter X to Exit: ")\par
\par
    if option == '1':\par
      print "RGB to Hex..."\par
      rgb_hex()\par
30.\par
Add a corresponding elif block that checks if the option is '2'. If it is, print Hex to RGB... first. Then, on the next line, call the hex_rgb() method.\par
\par
def convert():\par
  while True:\par
    option = raw_input("Enter 1 to convert RGB to HEX. Enter 2 to convert HEX to RGB. Enter X to Exit: ")\par
\par
    if option == '1':\par
      print "RGB to Hex..."\par
      rgb_hex()\par
    elif option == '2':\par
      # Print the message\par
      # Call the method\par
Use the hint from Step 29 to help you if you need more help.\par
\par
31.\par
Add another elif statement that checks if the option is 'X' or 'x'. If it is, exit the loop with the break keyword.\par
\par
def convert():\par
  while True:\par
    option = raw_input("Enter 1 to convert RGB to HEX. Enter 2 to convert HEX to RGB. Enter X to Exit: ")\par
\par
    if option == '1':\par
      print "RGB to Hex..."\par
      rgb_hex()\par
    # elif block\par
      # Print here\par
      # Call the method\par
    elif option == 'X' or option == 'x':\par
      break\par
32.\par
Finally, finish the if statement by adding an else block. This part of the statement will handle any other input from the user. Inside of the else block, print Error..\par
\par
33.\par
You're nearly done - great job! The next step is to actually call the method that will run our program.\par
\par
As the final line of your code (outside of any method), call the convert() method.\par
\par
def rgb_hex():\par
  # Code\par
\par
def hex_rgb():\par
  # Code\par
\par
def convert():\par
  # Code\par
\par
convert()\par
In the hint above, # Code simply indicates that the code has been abbreviated to avoid a lengthy hint. Actual code should not be removed or replaced.\par
\par
34.\par
Great! Let's test out the converter.\par
\par
In the terminal, type the following and hit "Enter" on your keyboard:\par
\par
python rgb2hex.py\par
Feel free to expand the functionality. Happy coding!\par
\par
If you correctly completed this project, then:\par
\par
Entering 255, 40, 123 as an RGB value will output FF287B as the hex value.\par
\par
Entering FF40AB as a hex value will output 255, 64, 171 as the RGB value.\par
\par
35.\par
Click here for a video walkthrough from our experts to help you check your work!\par
}
 